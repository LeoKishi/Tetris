

class Score:
    def search_completed_lines(self, array: list[list[int]]) -> list[int]:
        '''Returns a list with the indices of all completed horizontal lines'''
        completed_lines = []

        for i, line in enumerate(array):
            values_in_line = {val[0] for val in line}
            if values_in_line == {2}:
                completed_lines.append(i)

        return completed_lines


    def erase_line(self, array: list[list[int]], completed_lines: list[int]):
        '''Resets the lines from the given indices in the array.'''
        for i in completed_lines:
            array.pop(i)
            array.insert(0, [[0, ' '] for width in range(10)])


    def collapse_stack(self, array: list[list[int]], index: int):
        '''Drops the lines above the given index to the bottommost position they can be moved to.'''


        ...



if __name__ == '__main__':
    import gui

    score = Score()

    array =[[[2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [1, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[1, ' '], [1, ' '], [1, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' '], [0, ' ']],
            [[0, ' '], [0, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [0, ' ']],
            [[2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']],
            [[2, ' '], [2, ' '], [2, ' '], [0, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']],
            [[2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']],
            [[2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']],
            [[2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' '], [2, ' ']]]

    score.search_completed_lines(array)

